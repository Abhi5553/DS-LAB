#include <stdio.h>
#include <stdlib.h>
#define NULL 0
struct node
{
int data;
struct node* link;
};
struct node* top = NULL;
void display()
{
struct node* p = top;
if (p == NULL)
{
printf("Stack is empty.\n");
return;
}
while (p != NULL)
{
printf("%d -> ", p->data);
p = p->link;
}
printf("NULL\n");
}
{
void push(int num)
struct node* newnode = (struct node*)malloc(sizeof(struct node));
if (!newnode)
{
printf("Memory allocation failed.\n");
return;
}
newnode->data = num;
newnode->link = top;
top = newnode;
printf("%d pushed to stack.\n", num);
}
{
void pop()
if (top == NULL)
{
printf("Stack Underflow! Cannot pop from empty stack.\n");
return;
}
struct node* temp = top;
int n = temp->data;
top = top->link;
free(temp);
printf("Popped value: %d\n", n);
}
{
void peek()
if (top == NULL)
printf("Stack is empty.\n");
else
printf("Top of stack: %d\n", top->data);
}
int main()
{
int choice, value;
while (1)
{
printf("\n--- Stack Using Linked List ---\n");
printf("1. Push\n2. Pop\n3. Peek\n4. Display\n5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1: printf("Enter value to push: ");
scanf("%d", &value);
push(value); break;
case 2: pop(); break;
case 3: peek(); break;
case 4: display(); break;
case 5: printf("Exiting program.\n"); exit(0);
default: printf("Invalid choice! Try again.\n");
}
}
return 0;
}